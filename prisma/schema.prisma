// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser    String      @id @default(uuid()) @map("id_user") @db.Uuid
  name      String      @db.VarChar(20)
  email     String      @unique @db.VarChar(50)
  username  String      @unique @db.VarChar(30)
  password  String      @db.VarChar(30)
  twitters  Twitter[]   @relation("user_to_twitter")
  following Followers[] @relation("follower_to_user")
  followers Followers[] @relation("following")
  token     String?     @db.VarChar(4096)
  photo     String?     @db.VarChar(100)

  dthrCreated DateTime @default(now()) @map("dt_hr_created")
  dthrUpdated DateTime @updatedAt @map("dt_hr_updated")
  likes       Like[]   @relation("like_to_user")
  replies     Reply[]  @relation("reply_to_user")

  @@map("user")
}

model Reply {
  idTwitter String @id @default(uuid()) @map("id_reply") @db.Uuid

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [idUser], name: "reply_to_user")

  twitterOrigin String   @db.Uuid
  twitter       Twitter? @relation(fields: [twitterOrigin], references: [idTwitter], name: "reply_to_twitter")

  replyContent String @map("reply_content") @db.VarChar(144)

  likes Like[] @relation("like_to_reply")

  dthrCreated DateTime @default(now()) @map("dt_hr_created")
  dthrUpdated DateTime @updatedAt @map("dt_hr_updated")

  @@map("reply")
}

model Like {
  idLike String @id @default(uuid()) @db.Uuid
  idUser String @default(uuid()) @db.Uuid
  user   User   @relation(fields: [idUser], references: [idUser], name: "like_to_user")

  twitterId String?  @db.Uuid
  twitter   Twitter? @relation(fields: [twitterId], references: [idTwitter], name: "LikeToTwitter")

  dthrCreated DateTime @default(now()) @map("dt_hr_created")
  dthrUpdated DateTime @updatedAt @map("dt_hr_updated")

  replyId String? @db.Uuid
  reply   Reply?  @relation(fields: [replyId], references: [idTwitter], name: "like_to_reply")

  @@unique([idUser, twitterId])
  @@map("likes")
}

model Twitter {
  idTwitter String @id @default(uuid()) @map("id_twitter") @db.Uuid
  content   String @db.VarChar(144)
  type      String

  dthrCreated DateTime @default(now()) @map("dt_hr_created")
  dthrUpdated DateTime @updatedAt @map("dt_hr_updated")

  idUser  String  @db.Uuid
  user    User    @relation(fields: [idUser], references: [idUser], name: "user_to_twitter")
  likes   Like[]  @relation("LikeToTwitter")
  replies Reply[] @relation("reply_to_twitter")

  @@map("twitter")
}

model Followers {
  id     String @id @default(uuid()) @db.Uuid
  idUser String @db.Uuid
  user   User   @relation(fields: [idUser], references: [idUser], name: "follower_to_user")

  idFollowing String @db.Uuid
  following   User   @relation(fields: [idFollowing], references: [idUser], name: "following")

  dthrCreated DateTime @default(now()) @map("dt_hr_created")
  dthrUpdated DateTime @updatedAt @map("dt_hr_updated")

  @@map("followers")
}
